 // UNDEFINED [ { [ Symbol . toPrimitive ] : ID? => THROW } ] ;
 // NULL [ { [ Symbol . toPrimitive ] : ID? => THROW } ] ;
 ///
'' ?. x [ { [ Symbol . toPrimitive ] : x => await } ] . x ( ) ; 
+ function ( ) { } ( ) [ { [ Symbol . toPrimitive ] : x => await } ?? new 0 ] ; 
+ { [ function ( ) { } ( ) [ { [ Symbol . toPrimitive ] : x => await } ] ] : 0 } ; 
0 . x ??= ~ null [ { [ Symbol . toPrimitive ] : x => { throw 0 ; } } ] `` ;
0 . x [ { [ Symbol . toPrimitive ] : x => await } ] + 0 && 0 ; 
0 > [ 0 ] ?. [ 0 ] ?. x [ { [ Symbol . toPrimitive ] : function ( x , ) { throw 0 ; } } ] ; 
0 ?. x [ [ { [ Symbol . toPrimitive ] : function ( ) { x ( ) ; } } , ] ] ;
0 ?. x [ { [ Symbol . toPrimitive ] : ( ) => { throw 0 ; } } ] ( ) ; 
0 ?. x [ { [ Symbol . toPrimitive ] : ( ) => { throw 0 ; } } ] . x ( ) ; 
0 ?. x [ { [ Symbol . toPrimitive ] : ( ) => { throw 0 ; } } ] ; 
0 ?. x [ { [ Symbol . toPrimitive ] : x => -- await } ] ; 
0 ?. x [ { [ Symbol . toPrimitive ] : x => await } ] ( ) ; 
0 ?. x [ { [ Symbol . toPrimitive ] : x => await } ] ; 
0 [ function ( ) { } ( ) [ { [ Symbol . toPrimitive ] : function ( ) { new x ( ) ; } } ] || 0 ] ; 
0 in import ( 0 . x [ { [ Symbol . toPrimitive ] : x => await } ] ) ; 
[ 0 , function ( ) { } ( ) [ { [ Symbol . toPrimitive ] : x => { throw 0 ; } } ] ] ; 
class x { } this ?. x [ { [ Symbol . toPrimitive ] : ( ) => { throw 0 ; } } ] ;
for ( ; 0 . x [ { [ Symbol . toPrimitive ] : x => { throw 0 ; } } ] ; ) ;
for ( ; function ( ) { } ( ) [ { [ Symbol . toPrimitive ] : x => await } ] ; ) ; 
for ( let x of function ( ) { } ( ) [ { [ Symbol . toPrimitive ] : ( ) => { throw 0 ; } } ] ) ;
if ( [ ] ) throw function ( ) { } ( ) [ { [ Symbol . toPrimitive ] : ( ) => { throw 0 ; } } ] ; 
let { x } = typeof '' [ 0 ] [ { [ Symbol . toPrimitive ] : ( ) => { throw 0 ; } } ] ;
new function ( ) { { return function ( ) { } ( ) [ { [ Symbol . toPrimitive ] : ( ) => { throw 0 ; } } ] ; } } ; 
new true [ 0 ] [ { [ Symbol . toPrimitive ] : ( ) => { throw 0 ; } } ] ( ) ; 
new { [ function ( ) { } ( ) [ { [ Symbol . toPrimitive ] : ( ) => { throw 0 ; } } ] ] : 0 } ;
switch ( 0 ) { default : case function ( ) { } ( ) [ { [ Symbol . toPrimitive ] : ( ) => { throw 0 ; } } ] : ; } 
var x = 0 | x [ { [ Symbol . toPrimitive ] : ( ) => { throw 0 ; } } ] ;
var { 0 : [ ] = function ( ) { } ( ) [ { [ Symbol . toPrimitive ] : ( ) => { throw 0 ; } } ] } = 0 ; 
